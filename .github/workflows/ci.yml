name: Continuous Docker Image Build

on:
  push:
    branches:
      - '**'

  pull_request:

jobs:

  build-docker-images:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3.0.2

      - uses: actions/checkout@v2.4.0
        with:
          repository: ems-project/elasticms-demo
          path: test/demo

      - name: Prepare Elasticms Demo Project
        id: prep_demo
        run: |
          mkdir -p test/demo/dist
          npm install --save-dev webpack --prefix test/demo test/demo
          npm run --prefix test/demo prod
          chmod 777 test/demo/skeleton

      - name: Fill GitHub Environment Variables
        uses: FranzDiebold/github-env-vars-action@v2.4.0

      - name: Setup BATS testing framework
        uses: mig4/setup-bats@v1.2.0
        with:
          bats-version: 1.2.1

      - name: Fill PHP Version Environment Variable
        uses: c-py/action-dotenv-to-setenv@v3
        with:
          env-file: .build.env

      - name: Prepare Workflow Environment
        id: prep
        run: |
          docker network create docker_default
          docker pull appropriate/curl:latest
          IMAGENAME=docker.io/elasticms/admin
          VERSION_MAJOR_MINOR_PATCH=${{ env.ELASTICMS_ADMIN_VERSION }}
          VERSION_MAJOR_MINOR=${VERSION_MAJOR_MINOR_PATCH%.*}
          VERSION_MAJOR=${VERSION_MAJOR_MINOR%.*}
          echo ::set-output name=imagename::${IMAGENAME}
          echo ::set-output name=version_major_minor_patch::${VERSION_MAJOR_MINOR_PATCH}
          echo ::set-output name=version_major_minor::${VERSION_MAJOR_MINOR}
          echo ::set-output name=version_major::${VERSION_MAJOR}
          echo ::set-output name=build_date::$(date -u +'%Y-%m-%dT%H:%M:%SZ')

      - name: Fill Docker Image metadata
        id: meta
        uses: crazy-max/ghaction-docker-meta@v4.0.1
        with:
          images: "${{ steps.prep.outputs.imagename }}"
          tags: |
            type=raw,value=${{ env.CI_SHA_SHORT }}
            type=raw,value=${{ steps.prep.outputs.version_major_minor_patch }}
            type=raw,value=${{ steps.prep.outputs.version_major_minor }}
            type=raw,value=${{ steps.prep.outputs.version_major }}
            type=raw,value=latest

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2.0.0
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2.0.0

      - name: Cache Docker layers
        uses: actions/cache@v3.0.2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Docker Image
        id: build
        uses: docker/build-push-action@v3.0.0
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: Dockerfile
          build-args: |
            VERSION_ARG=${{ env.ELASTICMS_ADMIN_VERSION }}
            RELEASE_ARG=${{ env.CI_RUN_ID }}
            VCS_REF_ARG=${{ env.CI_SHA }}
            BUILD_DATE_ARG=${{ steps.prep.outputs.build_date }}
          push: false
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Scan Docker Image
        uses: azure/container-scan@v0
        with:
          image-name: ${{ steps.prep.outputs.imagename }}:${{ env.CI_SHA_SHORT }}
          severity-threshold: CRITICAL

      - name: Test Docker Image
        env: 
          ELASTICMS_ADMIN_DOCKER_IMAGE_NAME: ${{ steps.prep.outputs.imagename }}:${{ env.CI_SHA_SHORT }}
        run: |
          bats -r test/tests.bats

      - name: Push Docker Image
        id: push
        uses: docker/build-push-action@v3.0.0
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: Dockerfile
          build-args: |
            VERSION_ARG=${{ env.ELASTICMS_ADMIN_VERSION }}
            RELEASE_ARG=${{ env.CI_RUN_ID }}
            VCS_REF_ARG=${{ env.CI_SHA }}
            BUILD_DATE_ARG=${{ steps.prep.outputs.build_date }}
          push: ${{ github.event_name != 'pull_request' && github.ref == 'refs/heads/master' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Check Docker Image
        if: github.event_name != 'pull_request' && github.ref == 'refs/heads/master'
        run: |
          docker buildx imagetools inspect ${{ steps.prep.outputs.imagename }}:${{ steps.prep.outputs.version_major_minor_patch }}

      - name: Check Docker Images pull's
        if: github.event_name != 'pull_request' && github.ref == 'refs/heads/master'
        run: |
          docker pull ${{ steps.prep.outputs.imagename }}:${{ steps.prep.outputs.version_major_minor_patch }}
